/*
 * This file is generated by jOOQ.
 */
package dunder.mifflin.persistence.jdbc.jooq.tables;


import dunder.mifflin.persistence.jdbc.jooq.Indexes;
import dunder.mifflin.persistence.jdbc.jooq.Keys;
import dunder.mifflin.persistence.jdbc.jooq.Public;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Prescription extends TableImpl<Record> {

    private static final long serialVersionUID = -568430521;

    /**
     * The reference instance of <code>public.prescription</code>
     */
    public static final Prescription PRESCRIPTION = new Prescription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.prescription.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('prescription_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.prescription.place</code>.
     */
    public final TableField<Record, Long> PLACE = createField(DSL.name("place"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.prescription.date</code>.
     */
    public final TableField<Record, OffsetDateTime> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.prescription.concerns</code>.
     */
    public final TableField<Record, Long> CONCERNS = createField(DSL.name("concerns"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.prescription</code> table reference
     */
    public Prescription() {
        this(DSL.name("prescription"), null);
    }

    /**
     * Create an aliased <code>public.prescription</code> table reference
     */
    public Prescription(String alias) {
        this(DSL.name(alias), PRESCRIPTION);
    }

    /**
     * Create an aliased <code>public.prescription</code> table reference
     */
    public Prescription(Name alias) {
        this(alias, PRESCRIPTION);
    }

    private Prescription(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Prescription(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Prescription(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PRESCRIPTION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRESCRIPTION_PKEY);
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return Keys.IDENTITY_PRESCRIPTION;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PRESCRIPTION_PKEY;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.PRESCRIPTION_PKEY);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.PRESCRIPTION__PRESCRIPTION_PLACE_FKEY, Keys.PRESCRIPTION__PRESCRIPTION_CONCERNS_FKEY);
    }

    public Province province() {
        return new Province(this, Keys.PRESCRIPTION__PRESCRIPTION_PLACE_FKEY);
    }

    public Follows follows() {
        return new Follows(this, Keys.PRESCRIPTION__PRESCRIPTION_CONCERNS_FKEY);
    }

    @Override
    public Prescription as(String alias) {
        return new Prescription(DSL.name(alias), this);
    }

    @Override
    public Prescription as(Name alias) {
        return new Prescription(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prescription rename(String name) {
        return new Prescription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prescription rename(Name name) {
        return new Prescription(name, null);
    }
}
